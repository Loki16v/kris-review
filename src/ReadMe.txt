
Подведем итог по тем инструментам, которые мы знаем:
- Простой if:

    if (%условие%) {
        %какой то код%
    }

    Код выполняется последовательно строка за строкой. И когда доходим до строки 5, if проверяет условие в круглых
    скобках. Если в круглых скобках получается
         1. true - выполняется код внутри фигурных скобок {}
         2. false - код в фигурных скобках игнорируется и далее программа продолжается с 8ой строки
    Удобно использовать, если нужно что-то сделать, когда при определенном условии, а в остальных случаях делать ничего
    не нужно.
        Например:
        Температура в комнате выше 20 градусов -> включить кондиционер
        20 или ниже -> игнорируем

- if else:

    if (%условие%) {
        %какой то код%
    } else {
        %какой то другой код%
    }

    Если условие
        1. true - выполняем %какой то код%
        2. false - выполняем %какой то другой код%
    Идеальный вариант, когда нужно выполнить одно из 2-ух возможных действий в зависимости от условия.
        Например:
        Если меньше 6 лет -> отправляем в детский садик
        6 и больше -> в школу, универ или любые уже образовательные организации, где жопу не подтирают =)

- else if:

    if (%условие1%) {
        %какое то действие1 %
    } else if (%условие2%) {
        %какое то действие2 %
    } else if (%условие3%) {
        %какое то действие3 %
    } else if (%условие4%) {
        %какое то действие4 %
    } else {
        %действие для любых других вариантов%
    }
    Подходит когда вариантов действий много(по факту больше двух). Например, магазинная скидка:
        если потратил больше 100$, но меньше 199$ -> скидка 5%
        если потратил 200$ и больше , но меньше 399$ -> скидка 8%
        если потратил 400$ и больше , но меньше 499$ -> скидка 10%
        если потратил 500$ и больше , но меньше 599$ -> скидка 13%
        если потратил 600$ и больше , но меньше 699$ -> скидка 15%
        если потратил 700$ и больше -> макскимальная скидка 20%


- for:
    Со структурой ты уже знакома, в классическом виде это выглядит так:
    for (int i = 0; i < %какое-то значение%; i++) {}
    int i = 0 - инициализируем счетчик (он инициализируется только при первой итерации, при последующих не будет)
    i < %какое-то значение% - условие выхода из цикла for, как только условие вернуло false
    i++ - доп действие, 99,9% это работа со счетчик(так было задумано изначально), инкременируем счетчик(i++) или
    декрементируем(i--)
    Из этой конструкции можно сделать вывод, что мы точно знаем СКОЛЬКО РАЗ ЦИКЛ ДОЛЖЕН ОТРАБОТАТЬ. Т.е. у нас есть
    понимание о точном количестве повторений - цикл for подходит идеально. For часто искользуется для перебора значений
    массива, ведь мы точно знаем длинну массива(т.к. мы задаем длинну массива при его инициализации):
    for (int i = 0; i < %длинна массива%; i++) {
        %выполнения действия над элементом массива номер i %
    }
    Некоторые специфические моменты for:
    - мы инициализируем i только один раз, когда for цикл начинает работать (int i = 0). Далее мы просто пользуемся той
        же самой переменной i все итерации. А в этом примере с while i инициализируется каждую итерацию:
            while (%условие%) {
                int i = 0;
                System.out.println(i);
                i++;
            }
        System.out.println(i) всегда будет выводить 0, т.к. когда мы выйдем из итерации (выполним все что было в
        фигурных скобках {} ), все переменные которые были созданы в {} будут стерты и следующую итерацию создастся
        новая переменная i.


- while:
    while (%условие%) {
        %какой-то код%
    }
    Выполняем %какой-то код% снова и снова пока %условие% возращает true. %условие% проверяется перед кодом в фигурных
    скобках, поэтому если условие с первого раза false %какой-то код% не выполнится ни разу. while идеально подходит,
    если мы точно не знаем сколько раз должен отработать %какой-то код%, но также while может использоваться для
    выполнения заранее ивестного количества повторений.


- do while:
    do {
        %какой-то код%
    } while (%условие%);
    Выполняем %какой-то код% снова и снова пока %условие% возращает true, %условие% проверяется после выполнения кода в
    фигурных скобках. Таким образом, мы гарантируем что %какой-то код% выполнится хотя бы один раз, даже если %условие%
    с первого раза вернуло false. do while идеально подходит, если нам нужно чтобы %какой-то код% выполнился хотя бы
    один раз или, если переменные необходимые для %условие% формируются в %какой-то код%.


Пересмотрел весь твой код и ты большая молодец =) Да, сложно... Но у тебя получается (っᵔ◡ᵔ)っ

 (\(\
=('.')=
(").(")