Массивы:

Рассмотрим общее объявление и инициализацию:
    String s;
    int i;
    boolean b;

    В данном случае мы только объявили переменные, т.е. сказали что планируем пользоваться переменными:
        - s которая имеет тип String
        - i c типом int
        - b с типом boolean
    Просто объявленные переменные и не инициализованные переменные джавакомпилятор не даст использовать:
        String s;
        System.out.println(s); // тут s будет подчеркнута красной линией еще до выполнения кода с ошибкой java:
                                                                    variable s might not have been initialized
    Запуск кода выведет ту же ошибку: java: variable s might not have been initialized

    Объявляем и инициализируем:
        String s = "Hello"; (String s = ""; это тоже инициализация, только пустой строкой)
        int i;
        i = 5; (инициализировать можно после объявления, главное до того как переменная будет использоваться)
        boolean = true;
    Теперь переменные не только объявлены, но и проинициализированы (значения заданы, переменная не пустая).

    Если вернуться к строке 14 где компилятор просит инициализацию, то специфика инициализации сильно отличается для
    примитивных типов (int, boolean, char,byte, short, long, float, double) и объектов (например String). Касаться
    сейчас не будем. НО НЕ СТОИТ ОЦЕНИВАТЬ ЧТО ПРОСТО ОБЪЯВЛЕННЫМ ПЕРЕМЕННЫМ ЗАДАЮТСЯ ДЕФОЛТНЫЕ ЗНАЧЕНИЯ, ЭТО НЕ ТАК.
    Т.е. не инициализированная, a только объявленная переменная (String s;) - это НЕ тоже самое что String s = null;

    Для всех типов переменных есть дефолтные значения:
        - для int это 0
        - для double это 0.0
        - для boolean это false
        - для String это null  (как и для любого другого объекта. String тоже является объектом)

    ИМЕННО ЭТИ ДЕФОЛТНЫЕ ЗНАЧЕНИЯ АВТОМАТИЧЕСКИ ПРИСВАИВАЮТСЯ ЭЛЕМЕНТАМ ПРИ СОЗДАНИИ МАССИВА (если мы не указали
    значения при создании массива).
=====================================================================

Объявление и инициализация массивов:
    Тут все очень похоже на обычные переменные.
    Объявление массива:
        int[] intArray;
        String[] stringArray;
        boolean[] booleanArray;
    Аналогично, обычным переменным, объявляется и массив просто сообщаем что будем пользоваться. Но по факту как
    такового, массива еще не существует вовсе.

    Инициализация массива:
        int[] intArray = new int[4];
        String[] stringArray = new String[5];
        boolean[] booleanArray = new boolean[3];
    Тут массивы были инициализированы, т.е. созданы в памяти компьютера. Т.к. мы не задавали значения - все ячейки
    автоматически заполнились дефолтными значениями.
     - intArray имеет 4 ячейки, каждая из которых заполнена значением 0
     - stringArray 5 ячеек, заполненные null
     - booleanArray 3 ячейки, заполненные false

     Также можно явно указать значения массива(при этом не нужно указывать размер в []):
        int[] array = new int[]{1, 5, 8, 2};
     Тут был создан массив с 4мя элементами типа int 1, 5, 8, 2.

Двумерные массивы:
    Предположим у нас есть 3 массива:
        int[] array1 = new int[]{1, 2, 3};
        int[] array2 = new int[]{4, 5, 6};
        int[] array3 = new int[]{7, 8, 9};
    А что если мы хотим создать общий массив куда положим эти 3 массива. Это же возможно если мы на секунду представим,
    что array1, array2, array3 такие же переменные как например String s = "Hello"; Если мы положим эти 3 массива в
    один общий массив - получится двумерный массив:
        int[][] commonArray = new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    Исползуя одну квадратную скобку для commonArray мы получаем элемент двумерного массива commonArray. Этот элемент
    является одномерным массивом(commonArray это двумерный массив, элементы которого одномерные массивы):
        int[] firstArray = commonArray[0]; // firstArray будет одномерным массивом {1, 2, 3}
        int[] secondArray = commonArray[1]; // secondArray будет одномерным массивом {4, 5, 6}
        int[] thirdArray = commonArray[2]; // thirdArray будет одномерным массивом {7, 8, 9}
    Если использовать вторую квадратную скобку - можно дотянуться до самого элемента int:
        int element = commonArray[2][1]; // commonArray[2] выбирал свой элемент(одномерный массив {7, 8, 9}),
                                            а во вторых квадратных скобках [1] указан элемент выбранного одномерного
                                            массива. это будет 8


    По такому же принципу работают трехмерные массивы и четырех мерные. Т.е. трехмерный массив состоит из двумерных,
    эти двумерные состоят из одномерных, а одномерные состоят из элементов. Пример трехмерного массива:

        int[][][] array = new int[][][]{
                        {
                                {1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}
                        },
                        {
                                {13, 14, 15, 16}, {17, 18, 19, 20}, {21, 22, 23, 24}
                        }
        };

        С 86 по 96 строку инициализирован трехмерный массив из 2х двумерных массивов. Двумерные массивы:
         - первый, строки 87-89, этот двумерный массив содержит в себе 3 одномерных массива. Длинна одномерных
            массивов = 4
         - второй, строки 90-92, этот двумерный массив содержит в себе тоже 3 одномерных массива. Длинна одномерных
            массивов = 4

         Если бы нужно было проинициализировать такой трехмерный массив без значений, то выглядело бы это так:
            int[][][] array =  new int[2][3][4];
